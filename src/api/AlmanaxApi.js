/**
 * dofusdude
 * # Open Ankama Developer Community The all-in-one toolbelt for your next Ankama related project.  ## Versions - [Dofus 2](https://docs.dofusdu.de/dofus2/) - [Dofus 3](https://docs.dofusdu.de/dofus3/)   - v1 [latest] (you are here)   ## Client SDKs - [Javascript](https://github.com/dofusdude/dofusdude-js) `npm i dofusdude-js --save` - [Typescript](https://github.com/dofusdude/dofusdude-ts) `npm i dofusdude-ts --save` - [Go](https://github.com/dofusdude/dodugo) `go get -u github.com/dofusdude/dodugo` - [Python](https://github.com/dofusdude/dofusdude-py) `pip install dofusdude` - [Java](https://github.com/dofusdude/dofusdude-java) Maven with GitHub packages setup  Everything, including this site, is generated out of the [Docs Repo](https://github.com/dofusdude/api-docs). Consider it the Single Source of Truth. If there is a problem with the SDKs, create an issue there.  Your favorite language is missing? Please let me know!  # Main Features - ü•∑ **Seamless Auto-Update** load data in the background when a new Dofus version is released and serving it within 10 minutes with atomic data source switching. No downtime and no effects for the user, just always up-to-date.  - ‚ö° **Blazingly Fast** all data in-memory, aggressive caching over short time spans, HTTP/2 multiplexing, written in Go, optimized for low latency, hosted on bare metal in üá©üá™.  - üì® **Almanax Discord Integration** Use the endpoints as a dev or the official [Web Client](https://discord.dofusdude.com) as a user.  - ü©∏ **Dofus 3 Beta** from stable to bleeding edge by replacing /dofus3 with /dofus3beta.  - üó£Ô∏è **Multilingual** supporting _en_, _fr_, _es_, _pt_, _de_.  - üß† **Search by Relevance** allowing typos in name and description, handled by language specific text analysis and indexing.  - üïµÔ∏è **Official Sources** generated from actual data from the game.  ... and much more on the Roadmap on my [Discord](https://discord.gg/3EtHskZD8h). 
 *
 * The version of the OpenAPI document: 1.0.0-rc.10
 * Contact: stelzo@steado.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Almanax from '../model/Almanax';

/**
* Almanax service.
* @module api/AlmanaxApi
* @version 1.0.0-rc.10
*/
export default class AlmanaxApi {

    /**
    * Constructs a new AlmanaxApi. 
    * @alias module:api/AlmanaxApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getAlmanaxDate operation.
     * @callback module:api/AlmanaxApi~getAlmanaxDateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Almanax} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Single Almanax Date
     * Get a single date. There are not more details in the returned object than the normal range endpoint.
     * @param {module:model/String} language code
     * @param {Date} date yyyy-mm-dd
     * @param {Object} opts Optional parameters
     * @param {Number} [level] character level for the reward_xp field
     * @param {module:api/AlmanaxApi~getAlmanaxDateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Almanax}
     */
    getAlmanaxDate(language, date, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'language' is set
      if (language === undefined || language === null) {
        throw new Error("Missing the required parameter 'language' when calling getAlmanaxDate");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling getAlmanaxDate");
      }

      let pathParams = {
        'language': language,
        'date': date
      };
      let queryParams = {
        'level': opts['level']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Almanax;
      return this.apiClient.callApi(
        '/dofus3/v1/{language}/almanax/{date}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAlmanaxRange operation.
     * @callback module:api/AlmanaxApi~getAlmanaxRangeCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Almanax>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Almanax Range
     * Get a range of dates, defaults to today + 6 following days but can specified by the query parameters.   filter[bonus_type] can be used seperately and does not have an effect on the other parameters.  range[from] changes the start date, everything else defaults to 6 following dates from this start date.  range[to] when used without anything else, it will use today as start date and this parameter as end. All ranges are inclusive.  range[from] + range[to] = inclusive range over the specified dates, should never be farther apart than 35 days.  range[from|to] + range[size] no need to specify the date, just following days with [from] (0 is today) or go backwards in time with only [to] and [size].  Not all combinations are listed but this should give you an idea how to they could work.
     * @param {module:model/String} language code
     * @param {Object} opts Optional parameters
     * @param {String} [filterBonusType] ids from meta/{language}/almanax/bonuses
     * @param {Date} [rangeFrom] yyyy-mm-dd
     * @param {Date} [rangeTo] yyyy-mm-dd
     * @param {Number} [rangeSize] Size of the returned range. Disable to fully use the range by setting size to -1.
     * @param {String} [timezone = 'Europe/Paris')] determine what the current time is. If you live in Brazil, \"today\" will be hours apart from Paris. Use your timezone to get results relative to your location.
     * @param {Number} [level] character level for the reward_xp field
     * @param {module:api/AlmanaxApi~getAlmanaxRangeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Almanax>}
     */
    getAlmanaxRange(language, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'language' is set
      if (language === undefined || language === null) {
        throw new Error("Missing the required parameter 'language' when calling getAlmanaxRange");
      }

      let pathParams = {
        'language': language
      };
      let queryParams = {
        'filter[bonus_type]': opts['filterBonusType'],
        'range[from]': opts['rangeFrom'],
        'range[to]': opts['rangeTo'],
        'range[size]': opts['rangeSize'],
        'timezone': opts['timezone'],
        'level': opts['level']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Almanax];
      return this.apiClient.callApi(
        '/dofus3/v1/{language}/almanax', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
