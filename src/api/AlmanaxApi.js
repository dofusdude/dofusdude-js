/**
 * Dofusdude
 * The last API for everything Dofus ü§Ø  ```js var dofusdude = require(\"dofusdude-js\");  new dofusdude.AllItemsApi().getItemsAllSearch(   \"en\",   \"dofus2\",   \"nidas\",   { filterTypeName: \"hat\" },   (err, data, response) => {     console.log(data[0]);   } ); ```  ### Client SDKs - [Javascript](https://github.com/dofusdude/dofusdude-js) npm i dofusdude-js --save - [Typescript](https://github.com/dofusdude/dofusdude-ts) npm i dofusdude-ts --save  Everything, including this site, is generated out of the [Docs Repo](https://github.com/dofusdude/api-docs). Consider it the Single Source of Truth. If there is a problem with the SDKs, create an issue at the Docs Repo.  ## Main Features - ü•∑ **seamless auto-update** load data in the background when a new Dofus version is released and serving it within 2 minutes with atomic data source switching. No downtime and no effects for the user, just always up-to-date.  - ‚ö° **blazingly fast** all data in-memory, aggressive caching over short time spans, HTTP/2 multiplexing, written in Go, optimized for low latency, hosted on bare metal in üá©üá™.  - ü©∏ **Dofus 2 Beta** from stable to bleeding edge by replacing /dofus2 with /dofus2beta.  - üó£Ô∏è **multilingual** supporting _en_, _fr_, _es_, _pt_ including the dropped languages from the Dofus website _de_ and _it_.  - üß† **search by relevance** allowing typos in name and description, handled by language specific text analysis and indexing by the powerful [Meilisearch](https://www.meilisearch.com) written in Rust.  - üïµÔ∏è **complete** actual data from the game including items invisible to the encyclopedia like quest items.  - üñºÔ∏è **HD images** rendering vector graphics into PNGs up to 800x800 px in the background.   ## Current state - Weapons ‚úÖ - Equipment ‚úÖ - Sets ‚úÖ - Resources ‚úÖ - Consumables ‚úÖ - Pets ‚úÖ - Mounts ‚úÖ - Cosmetics/Ceremonial Items ‚úÖ - Harnesses ‚úÖ - Quest Items ‚úÖ - Almanax ‚úÖ  - Monsters ‚ùå - Classes ‚ùå - Spells ‚ùå - Professions ‚ùå   ### Maybes? I don't know what for ü§∑ - Sidekicks ‚ùå - Haven Bags ‚ùå - Map ‚ùå   ## Future I want this project to be useful and not just add plain categories no one needs. More and more features will be added to enhance the quality based on the needs of you, the developers.  Examples: _I need to know where I can drop the all the items I need to craft set X!_  _Please get a detailed always up-to-date spell description so I can calculate the damage for my set builder site!_  Nearly everything can be done. But I want to make sure somebody also wants it.  If you have anything or you are just interested in the project, join the [Discord](https://discord.gg/3EtHskZD8h).  ### Versioning Updating an API is a hard problem. This is why we'll keep it simple:  Everything you see here on this site, you can use now and forever. Updates could introduce new fields, new paths or parameter but never break backwards compatibility, so no field or parameter will be deleted. Ever.  There is one exception! **The API will _always_ choose being up-to-date over everything else**. So if Ankama decides to drop languages from the game like they did with their website, the API will loose support for them, too.  We can prevent this specific use case with a nice community but even then, it would be hidden behind a feature flag.  ## Get started! ü•≥ Scroll down and try it for yourself!  If you are ready to use them in your project, think about [generating a client üßô](https://github.com/OpenAPITools/openapi-generator) or use one of our pre generated SDKs linked at the top.  Awesome Projects using this API:  - [KaellyBot](https://github.com/Kaysoro/KaellyBot) by Kaysoro - [Dofus Craftlist](https://dofuscraftlist-dev.netlify.app) by Lystina - [AlmanaxApp](https://almanaxapp.netlify.app) by Lystina - [luwnarya.fr](https://luwnarya.fr)  
 *
 * The version of the OpenAPI document: 0.5.2
 * Contact: stelzo@steado.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AlmanaxEntry from '../model/AlmanaxEntry';

/**
* Almanax service.
* @module api/AlmanaxApi
* @version 0.5.2
*/
export default class AlmanaxApi {

    /**
    * Constructs a new AlmanaxApi. 
    * @alias module:api/AlmanaxApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getAlmanaxDate operation.
     * @callback module:api/AlmanaxApi~getAlmanaxDateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AlmanaxEntry} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Single Almanax Date
     * Get a single date. There are not more details in the returned object than the normal range endpoint.
     * @param {module:model/String} language code
     * @param {String} date yyyy-mm-dd
     * @param {module:api/AlmanaxApi~getAlmanaxDateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AlmanaxEntry}
     */
    getAlmanaxDate(language, date, callback) {
      let postBody = null;
      // verify the required parameter 'language' is set
      if (language === undefined || language === null) {
        throw new Error("Missing the required parameter 'language' when calling getAlmanaxDate");
      }
      // verify the required parameter 'date' is set
      if (date === undefined || date === null) {
        throw new Error("Missing the required parameter 'date' when calling getAlmanaxDate");
      }

      let pathParams = {
        'language': language,
        'date': date
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AlmanaxEntry;
      return this.apiClient.callApi(
        '/dofus2/{language}/almanax/{date}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAlmanaxRange operation.
     * @callback module:api/AlmanaxApi~getAlmanaxRangeCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AlmanaxEntry>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Almanax Range
     * Get a range of dates, defaults to today + 6 following days but can specified by the query parameters.   filter[bonus_type] can be used seperately and does not have an effect on the other parameters.  range[from] changes the start date, everything else defaults to 6 following dates from this start date.  range[to] when used without anything else, it will use today as start date and this parameter as end. All ranges are inclusive.  range[from] + range[to] = inclusive range over the specified dates, should never be farther apart than 35 days.  range[from|to] + range[size] no need to specify the date, just following days with [from] (0 is today) or go backwards in time with only [to] and [size].  Not all combinations are listed but this should give you an idea how to they could work.
     * @param {module:model/String} language code
     * @param {Object} opts Optional parameters
     * @param {String} opts.filterBonusType ids from meta/{language}/almanax/bonuses
     * @param {String} opts.rangeFrom yyyy-mm-dd
     * @param {String} opts.rangeTo yyyy-mm-dd
     * @param {Number} opts.rangeSize size of the returned range
     * @param {String} opts.timezone determine what the current time is. If you live in Brazil, \"today\" will be hours apart from Paris. Use your timezone to get results relative to your location. (default to 'Europe/Paris')
     * @param {module:api/AlmanaxApi~getAlmanaxRangeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AlmanaxEntry>}
     */
    getAlmanaxRange(language, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'language' is set
      if (language === undefined || language === null) {
        throw new Error("Missing the required parameter 'language' when calling getAlmanaxRange");
      }

      let pathParams = {
        'language': language
      };
      let queryParams = {
        'filter[bonus_type]': opts['filterBonusType'],
        'range[from]': opts['rangeFrom'],
        'range[to]': opts['rangeTo'],
        'range[size]': opts['rangeSize'],
        'timezone': opts['timezone']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [AlmanaxEntry];
      return this.apiClient.callApi(
        '/dofus2/{language}/almanax', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
