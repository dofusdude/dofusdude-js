/**
 * dofusdude
 * # A project for you - the developer. The all-in-one toolbelt for your next Ankama related project.  ## Client SDKs - [Javascript](https://github.com/dofusdude/dofusdude-js) npm i dofusdude-js --save - [Typescript](https://github.com/dofusdude/dofusdude-ts) npm i dofusdude-ts --save - [Go](https://github.com/dofusdude/dodugo) go get -u github.com/dofusdude/dodugo - [Python](https://github.com/dofusdude/dofusdude-py) pip install dofusdude - [PHP](https://github.com/dofusdude/dofusdude-php)  Everything, including this site, is generated out of the [Docs Repo](https://github.com/dofusdude/api-docs). Consider it the Single Source of Truth. If there is a problem with the SDKs, create an issue there.  Your favorite language is missing? Please let me know!  # Main Features - ü•∑ **Seamless Auto-Update** load data in the background when a new Dofus version is released and serving it within 2 minutes with atomic data source switching. No downtime and no effects for the user, just always up-to-date.  - ‚ö° **Blazingly Fast** all data in-memory, aggressive caching over short time spans, HTTP/2 multiplexing, written in Go, optimized for low latency, hosted on bare metal in üá©üá™.  - üì® **Discord Integration** Ankama related RSS and Almanax feeds to post to Discord servers with advanced features like filters or mentions. Use the endpoints as a dev or the official [Web Client](https://discord.dofusdude.com) as a user.  - ü©∏ **Dofus 2 Beta** from stable to bleeding edge by replacing /dofus2 with /dofus2beta.  - üó£Ô∏è **Multilingual** supporting _en_, _fr_, _es_, _pt_ including the dropped languages from the Dofus website _de_ and _it_.  - üß† **Search by Relevance** allowing typos in name and description, handled by language specific text analysis and indexing.  - üïµÔ∏è **Complete** actual data from the game including items invisible to the encyclopedia like quest items.  - üñºÔ∏è **HD Images** rendering game assets to high-res images with up to 800x800 px.  ... and much more on the Roadmap on my Discord.   ## Deploy now. Use forever. Everything you see here on this site, you can use now and forever. Updates could introduce new fields, new paths or parameter but never break backwards compatibility.  There is one exception! **The API will _always_ choose being up-to-date over everything else**. So if Ankama decides to drop languages from the game like they did with their website, the API will loose support for them, too.  ## Thank you! I highly welcome everyone on my [Discord](https://discord.gg/3EtHskZD8h) to just talk about projects and use cases or give feedback of any kind.  The servers have a fixed monthly cost to provide very fast responses. If you want to help me keeping them running or simply donate to that cause, consider becoming a [GitHub Sponsor](https://github.com/sponsors/dofusdude).
 *
 * The version of the OpenAPI document: 0.8.3
 * Contact: stelzo@steado.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.dofusdude);
  }
}(this, function(expect, dofusdude) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new dofusdude.WebhooksApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('WebhooksApi', function() {
    describe('deleteWebhooksAlmanaxId', function() {
      it('should call deleteWebhooksAlmanaxId successfully', function(done) {
        //uncomment below and update the code to test deleteWebhooksAlmanaxId
        //instance.deleteWebhooksAlmanaxId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteWebhooksRssId', function() {
      it('should call deleteWebhooksRssId successfully', function(done) {
        //uncomment below and update the code to test deleteWebhooksRssId
        //instance.deleteWebhooksRssId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteWebhooksTwitterId', function() {
      it('should call deleteWebhooksTwitterId successfully', function(done) {
        //uncomment below and update the code to test deleteWebhooksTwitterId
        //instance.deleteWebhooksTwitterId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMetaWebhooksAlmanax', function() {
      it('should call getMetaWebhooksAlmanax successfully', function(done) {
        //uncomment below and update the code to test getMetaWebhooksAlmanax
        //instance.getMetaWebhooksAlmanax(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMetaWebhooksRss', function() {
      it('should call getMetaWebhooksRss successfully', function(done) {
        //uncomment below and update the code to test getMetaWebhooksRss
        //instance.getMetaWebhooksRss(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getMetaWebhooksTwitter', function() {
      it('should call getMetaWebhooksTwitter successfully', function(done) {
        //uncomment below and update the code to test getMetaWebhooksTwitter
        //instance.getMetaWebhooksTwitter(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getWebhooksAlmanaxId', function() {
      it('should call getWebhooksAlmanaxId successfully', function(done) {
        //uncomment below and update the code to test getWebhooksAlmanaxId
        //instance.getWebhooksAlmanaxId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getWebhooksRssId', function() {
      it('should call getWebhooksRssId successfully', function(done) {
        //uncomment below and update the code to test getWebhooksRssId
        //instance.getWebhooksRssId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getWebhooksTwitterId', function() {
      it('should call getWebhooksTwitterId successfully', function(done) {
        //uncomment below and update the code to test getWebhooksTwitterId
        //instance.getWebhooksTwitterId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('postWebhooksAlmanax', function() {
      it('should call postWebhooksAlmanax successfully', function(done) {
        //uncomment below and update the code to test postWebhooksAlmanax
        //instance.postWebhooksAlmanax(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('postWebhooksRss', function() {
      it('should call postWebhooksRss successfully', function(done) {
        //uncomment below and update the code to test postWebhooksRss
        //instance.postWebhooksRss(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('postWebhooksTwitter', function() {
      it('should call postWebhooksTwitter successfully', function(done) {
        //uncomment below and update the code to test postWebhooksTwitter
        //instance.postWebhooksTwitter(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putWebhooksAlmanaxId', function() {
      it('should call putWebhooksAlmanaxId successfully', function(done) {
        //uncomment below and update the code to test putWebhooksAlmanaxId
        //instance.putWebhooksAlmanaxId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putWebhooksRssId', function() {
      it('should call putWebhooksRssId successfully', function(done) {
        //uncomment below and update the code to test putWebhooksRssId
        //instance.putWebhooksRssId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('putWebhooksTwitterId', function() {
      it('should call putWebhooksTwitterId successfully', function(done) {
        //uncomment below and update the code to test putWebhooksTwitterId
        //instance.putWebhooksTwitterId(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
