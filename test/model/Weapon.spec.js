/**
 * Dofusdude
 * The last API for everything Dofus ü§Ø <h2>Main Features</h2> <ul> <li>ü•∑ <b>seamless auto-update</b> load data in the background when a new Dofus version is released and serving it within 2 minutes with atomic data source switching. No downtime and no effects for the user, just always up-to-date.</li>  <li>‚ö° <b>blazingly fast</b> all data in-memory, aggressive caching over short time spans, HTTP/2 multiplexing, written in Go, optimized for low latency, hosted on bare metal in üá©üá™.</li>  <li>ü©∏ <b>Dofus 2 Beta</b> from stable to bleeding edge by replacing /dofus2 with /dofus2beta.</li>  <li>üó£Ô∏è <b>multilingual</b> supporting <em>en</em>, <em>fr</em>, <em>es</em>, <em>pt</em> including the dropped languages from the Dofus website <em>de</em> and <em>it</em>.</li>  <li>üß† <b>search by relevance</b> allowing typos in name and description, handled by language specific text analysis and indexing by the powerful <a href=\"https://www.meilisearch.com\">Meilisearch</a> written in Rust.</li>  <li>üïµÔ∏è <b>complete</b> actual data from the game including items invisible to the encyclopedia like quest items.</li>  <li>üñºÔ∏è <b>HD images</b> rendering vector graphics into PNGs up to 800x800 px in the background.</li>  </ul>   <h2>Current state</h2> <ul> <li>Weapons ‚úÖ</li> <li>Equipment ‚úÖ</li> <li>Sets ‚úÖ</li> <li>Resources ‚úÖ</li> <li>Consumables ‚úÖ</li> <li>Pets ‚úÖ</li> <li>Mounts ‚úÖ</li> <li>Cosmetics/Ceremonial Items ‚úÖ</li> <li>Harnesses ‚úÖ</li> <li>Quest Items ‚úÖ</li> <li>Almanax ‚úÖ</li> </ul>  <ul> <li>Monsters ‚ùå</li> <li>Classes ‚ùå</li> <li>Spells ‚ùå</li> <li>Professions ‚ùå </li> </ul>   <h3>Maybes? I don't know what for ü§∑</h3> <ul> <li>Sidekicks ‚ùå</li> <li>Haven Bags ‚ùå</li> <li>Map ‚ùå</li> </ul>   <h2>Future</h2> I want this project to be useful and not just add plain categories no one needs. More and more features will be added to enhance the quality based on the needs of you, the developers. <br>Examples: <p><em>I need to know where I can drop the all the items I need to craft set X!</em></p> <p><em>Please get a detailed always up-to-date spell description so I can calculate the damage for my set builder site!</em></p> <p>Nearly everything can be done. But I want to make sure somebody also wants it. If you have anything or you are just interested in the project, join the <a href=\"https://discord.gg/3EtHskZD8h\">Discord</a>.</p>  <h3>Versioning</h3> <p>Updating an API is a hard problem. This is why we'll keep it simple:  Everything you see here on this site, you can use now and forever. Updates could introduce new fields, new paths or parameter but never break backwards compatibility, so no field or parameter will be deleted. Ever. </p> <p>There is one exception! <b>The API will <em>always</em> choose being up-to-date over everything else</b>. So if Ankama decides to drop languages from the game like they did with their website, the API will loose support for them, too. </p> <p> We can prevent this specific use case with a nice community but even then, it would be hidden behind a feature flag. </p>  <h2>Get started! ü•≥</h2> <p>Scroll down and try it for yourself!</p> <p>If you are ready to use them in your project, think about <a href=\"https://github.com/OpenAPITools/openapi-generator\">generating a client üßô</a> from the <a href=\"https://raw.githubusercontent.com/dofusdude/api-docs/main/openapi-3.0.yaml\">OpenAPI 3.0 Spec</a> to get started quickly.</p>  <p>Awesome Projects using this API:</p> <ul> <li><a href=\"https://github.com/Kaysoro/KaellyBot\">KaellyBot</a> by Kaysoro</li> <li><a href=\"https://dofuscraftlist-dev.netlify.app\">Dofus Craftlist</a> by Lystina</li> <li><a href=\"https://almanaxapp.netlify.app\">AlmanaxApp</a> by Lystina</li> <li><a href=\"https://luwnarya.fr\">luwnarya.fr</a></li> </ul>  My old <a href=\"https://alm.dofusdu.de/swagger\">Almanax API v1</a> is an example for using a <a href=\"https://github.com/dofusdude/almanax-api/tree/main/src/main/java/org/acme/openapi\">generated Client</a> from the OpenAPI Spec.  
 *
 * The version of the OpenAPI document: 0.5.1
 * Contact: stelzo@steado.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.dofusdude);
  }
}(this, function(expect, dofusdude) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new dofusdude.Weapon();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Weapon', function() {
    it('should create an instance of Weapon', function() {
      // uncomment below and update the code to test Weapon
      //var instance = new dofusdude.Weapon();
      //expect(instance).to.be.a(dofusdude.Weapon);
    });

    it('should have the property ankamaId (base name: "ankama_id")', function() {
      // uncomment below and update the code to test the property ankamaId
      //var instance = new dofusdude.Weapon();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new dofusdude.Weapon();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new dofusdude.Weapon();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new dofusdude.Weapon();
      //expect(instance).to.be();
    });

    it('should have the property isWeapon (base name: "is_weapon")', function() {
      // uncomment below and update the code to test the property isWeapon
      //var instance = new dofusdude.Weapon();
      //expect(instance).to.be();
    });

    it('should have the property level (base name: "level")', function() {
      // uncomment below and update the code to test the property level
      //var instance = new dofusdude.Weapon();
      //expect(instance).to.be();
    });

    it('should have the property pods (base name: "pods")', function() {
      // uncomment below and update the code to test the property pods
      //var instance = new dofusdude.Weapon();
      //expect(instance).to.be();
    });

    it('should have the property imageUrls (base name: "image_urls")', function() {
      // uncomment below and update the code to test the property imageUrls
      //var instance = new dofusdude.Weapon();
      //expect(instance).to.be();
    });

    it('should have the property hasEffects (base name: "has_effects")', function() {
      // uncomment below and update the code to test the property hasEffects
      //var instance = new dofusdude.Weapon();
      //expect(instance).to.be();
    });

    it('should have the property effects (base name: "effects")', function() {
      // uncomment below and update the code to test the property effects
      //var instance = new dofusdude.Weapon();
      //expect(instance).to.be();
    });

    it('should have the property hasConditions (base name: "has_conditions")', function() {
      // uncomment below and update the code to test the property hasConditions
      //var instance = new dofusdude.Weapon();
      //expect(instance).to.be();
    });

    it('should have the property conditions (base name: "conditions")', function() {
      // uncomment below and update the code to test the property conditions
      //var instance = new dofusdude.Weapon();
      //expect(instance).to.be();
    });

    it('should have the property criticalHitProbability (base name: "critical_hit_probability")', function() {
      // uncomment below and update the code to test the property criticalHitProbability
      //var instance = new dofusdude.Weapon();
      //expect(instance).to.be();
    });

    it('should have the property criticalHitBonus (base name: "critical_hit_bonus")', function() {
      // uncomment below and update the code to test the property criticalHitBonus
      //var instance = new dofusdude.Weapon();
      //expect(instance).to.be();
    });

    it('should have the property isTwoHanded (base name: "is_two_handed")', function() {
      // uncomment below and update the code to test the property isTwoHanded
      //var instance = new dofusdude.Weapon();
      //expect(instance).to.be();
    });

    it('should have the property maxCastPerTurn (base name: "max_cast_per_turn")', function() {
      // uncomment below and update the code to test the property maxCastPerTurn
      //var instance = new dofusdude.Weapon();
      //expect(instance).to.be();
    });

    it('should have the property apCost (base name: "ap_cost")', function() {
      // uncomment below and update the code to test the property apCost
      //var instance = new dofusdude.Weapon();
      //expect(instance).to.be();
    });

    it('should have the property range (base name: "range")', function() {
      // uncomment below and update the code to test the property range
      //var instance = new dofusdude.Weapon();
      //expect(instance).to.be();
    });

    it('should have the property hasRecipe (base name: "has_recipe")', function() {
      // uncomment below and update the code to test the property hasRecipe
      //var instance = new dofusdude.Weapon();
      //expect(instance).to.be();
    });

    it('should have the property recipe (base name: "recipe")', function() {
      // uncomment below and update the code to test the property recipe
      //var instance = new dofusdude.Weapon();
      //expect(instance).to.be();
    });

    it('should have the property hasParentSet (base name: "has_parent_set")', function() {
      // uncomment below and update the code to test the property hasParentSet
      //var instance = new dofusdude.Weapon();
      //expect(instance).to.be();
    });

    it('should have the property parentSet (base name: "parent_set")', function() {
      // uncomment below and update the code to test the property parentSet
      //var instance = new dofusdude.Weapon();
      //expect(instance).to.be();
    });

  });

}));
